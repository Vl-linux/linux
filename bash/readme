Скрипт для защиты от переполнения тома.
- предназначен для регулярной очистки файлов (архива, регулярно записываемых файлов видео, аудио, фото) может работать в кроне и выполняться каждый день, час, неделю. Идеально подходит для сервера видео наблюдения.
- в данном скрипте используются регуляторные выражения, условие, awk, а так же  перемеренные и другие функции

#! /bin/bash
var=`df | grep '\b[89][0-9]%*./$' | awk '{print $(NF-1)}'`; # вывод строки "/" но только в заданном диапазоне регулятного выражения, и вывод только этого поля (т.е. вывод только нужного занятого пространства при его наличии)
if test -z "$var"; # Проверка на наличие аргумента в переменной
then # при отсутствии (условие выполнено) - завершение
exit 0;
else # при невыполнении условия - выполняем действие
#echo  del -----------------------------------
find /opt/arhiv -ctime +7 -exec rm -rf {} \; # поиск и удаление всех файлов старше семи суток
fi
datemsg=" $(date +%d-%m-%Y\ %H:%M:%S) " # сообщение для ведения лог-файла (текущая дата время в нужном формате)
var1=`df | grep '/$' | awk '{print $(NF-1)}'` # определение вропрой переменной (для итогового сравнение в лог-файле)
echo $datemsg - "Cleaning of Archive: |Use Old - $var| => |Use New - $var1|" >> /var/log/arhiv-del.log # ведение лог-файла
exit 0;
лог-файл получается примерно следующий:
31-05-2018 14:02:37 - Cleaning of Archive: |Use Old - 92%| => |Use New - 52%|
01-06-2018 14:02:43 - Cleaning of Archive: |Use Old - 84%| => |Use New - 32%|
01-06-2018 19:02:44 - Cleaning of Archive: |Use Old - 89%| => |Use New - 72%|
02-06-2018 11:02:25 - Cleaning of Archive: |Use Old - 82%| => |Use New - 42%|
02-06-2018 14:02:46 - Cleaning of Archive: |Use Old - 85%| => |Use New - 22%|
02-06-2018 17:02:17 - Cleaning of Archive: |Use Old - 82%| => |Use New - 23%|
02-06-2018 20:02:47 - Cleaning of Archive: |Use Old - 82%| => |Use New - 12%|
...

______________________________________________________________________________________________



Скрипт для анализа логов ssh-сервера на подбор паролей...
- выводит анализирует и выводит информацию о неудачных попытках входа в систему в формате:
Количество | Дата | Логин
- в скрипте испотльзуются grep, awk, сортировка, удаление и подсчет повторяющихся строк 

#! /bin/bash
grep 'Failed password' /var/log/auth.log* | grep "ssh" | awk '{print $1,$2,$(NF-5)}' | sort -k 1,1M -k 2n | uniq -c

Вывод скрипта получается примерно следующий:
2186 Jun 2 root
141 Jun 2 user
3341 May 31 root
941 May 31 ubnt
156 May 31 user
1941 May 31 admin
...
